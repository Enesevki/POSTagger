# app.py

import streamlit as st
from src.model import load_crf_model, predict_tags
from src.features import sent2features
import os

POS_TR = {
    "NOUN": "Ä°sim",
    "VERB": "Fiil",
    "ADJ": "SÄ±fat",
    "ADV": "Zarf",
    "PRON": "Zamir",
    "PROPN": "Ã–zel Ä°sim",
    "AUX": "YardÄ±mcÄ± Fiil",
    "ADP": "Ä°lgeÃ§",
    "DET": "BelirteÃ§",
    "NUM": "SayÄ±",
    "CCONJ": "BaÄŸlaÃ§",
    "SCONJ": "BaÄŸlaÃ§ (Alt cÃ¼mle)",
    "PART": "PartikÃ¼l",
    "INTJ": "Ãœnlem",
    "PUNCT": "Noktalama",
    "SYM": "Sembol",
    "X": "Bilinmeyen",
    "O": "DiÄŸer"
}

# --- Streamlit UI AyarlarÄ± ---
st.set_page_config(page_title="TÃ¼rkÃ§e POS Tagger", page_icon="ğŸ¤–", layout="centered")
st.title("TÃ¼rkÃ§e POS Tagger Demo ğŸ¤–")
st.write("Herhangi bir TÃ¼rkÃ§e cÃ¼mle girin, kelimelerin hangi tÃ¼r (POS) olduÄŸunu gÃ¶rÃ¼n.")

@st.cache_resource
def load_model():
    model_path = "crf_final.pkl"
    if not os.path.exists(model_path):
        st.error(f"Model dosyasÄ± bulunamadÄ±: {model_path}")
        st.stop()
    return load_crf_model(model_path)

# --- KullanÄ±cÄ± GiriÅŸi ---
sentence = st.text_input("CÃ¼mlenizi girin:", "")

if st.button("POS Tagle!") or (sentence and st.session_state.get("already_tagged") != sentence):
    st.session_state["already_tagged"] = sentence

    model = load_model()

    words = sentence.strip().split()
    if not words:
        st.info("LÃ¼tfen bir cÃ¼mle girin.")
    else:
        # "O" etiketi dummy olarak kullanÄ±labilir
        dummy_tagged = [(word, "O") for word in words]
        features = [sent2features(dummy_tagged)]
        predictions = predict_tags(model, features)[0]

        display = [
            {"Kelime": w, "Etiket": tag, "TÃ¼rkÃ§esi": POS_TR.get(tag, "-")}
            for w, tag in zip(words, predictions)
        ]

        st.write("### SonuÃ§:")
        st.table(display)
