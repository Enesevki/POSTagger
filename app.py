# app.py

import streamlit as st
from src.model import load_crf_model, predict_tags
from src.features import sent2features
import os

# TÃ¼rkÃ§e POS etiket aÃ§Ä±klamalarÄ±
POS_TR = {
    "NOUN": "Ä°sim",
    "VERB": "Fiil",
    "ADJ": "SÄ±fat",
    "ADV": "Zarf",
    "PRON": "Zamir",
    "PROPN": "Ã–zel Ä°sim",
    "AUX": "YardÄ±mcÄ± Fiil",
    "ADP": "Ä°lgeÃ§",
    "DET": "BelirteÃ§",
    "NUM": "SayÄ±",
    "CCONJ": "BaÄŸlaÃ§",
    "SCONJ": "BaÄŸlaÃ§ (Alt cÃ¼mle)",
    "PART": "PartikÃ¼l",
    "INTJ": "Ãœnlem",
    "PUNCT": "Noktalama",
    "SYM": "Sembol",
    "X": "Bilinmeyen",
    "O": "DiÄŸer"
}

# UI baÅŸlÄ±ÄŸÄ± ve ayarlar
st.set_page_config(page_title="TÃ¼rkÃ§e POS Tagger", page_icon="ğŸ¤–", layout="centered")
st.title("TÃ¼rkÃ§e POS Tagger Demo ğŸ¤–")
st.write("CÃ¼mleyi olduÄŸu gibi veriyoruz. Token yok, split yok. Sihirli bir test :)")

@st.cache_resource
def load_model():
    model_path = "outputs/models/crf_final.pkl"
    if not os.path.exists(model_path):
        st.error(f"Model dosyasÄ± bulunamadÄ±: {model_path}")
        st.stop()
    return load_crf_model(model_path)

# GiriÅŸ
sentence = st.text_input("CÃ¼mlenizi girin:", "")

if st.button("POS Tagle!") or (sentence and st.session_state.get("already_tagged") != sentence):
    st.session_state["already_tagged"] = sentence

    model = load_model()

    if not sentence.strip():
        st.info("LÃ¼tfen bir cÃ¼mle girin.")
    else:
        try:
            # Token yok: TÃ¼m cÃ¼mle tek 'kelime' olarak veriliyor
            tokens = [(sentence.strip(), "O")]
            features = [sent2features(tokens)]
            predictions = predict_tags(model, features)[0]

            display = [{
                "CÃ¼mle": sentence,
                "Etiket": predictions[0],
                "TÃ¼rkÃ§esi": POS_TR.get(predictions[0], "-")
            }]

            st.write("### SonuÃ§:")
            st.table(display)
        except Exception as e:
            st.error(f"Bir hata oluÅŸtu: {e}")
